{"version":3,"file":"js/app.117ed9ee.js","mappings":"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","sources":["webpack://simulation/./src/App.vue","webpack://simulation/./src/components/SimulationControls.vue","webpack://simulation/./src/models/ModelEquations.js","webpack://simulation/./src/models/MorbidostatUpdater.js","webpack://simulation/./src/models/BacteriaGrowthModel.js","webpack://simulation/./src/models/ParameterPlotting.js","webpack://simulation/./src/components/SimulationControls.vue?a1ee","webpack://simulation/./src/components/AnimatedBacteria.vue","webpack://simulation/./src/components/AnimatedBacteria.vue?8b1d","webpack://simulation/./src/App.vue?7ccd","webpack://simulation/./src/main.js","webpack://simulation/webpack/bootstrap","webpack://simulation/webpack/runtime/amd options","webpack://simulation/webpack/runtime/chunk loaded","webpack://simulation/webpack/runtime/compat get default export","webpack://simulation/webpack/runtime/define property getters","webpack://simulation/webpack/runtime/global","webpack://simulation/webpack/runtime/hasOwnProperty shorthand","webpack://simulation/webpack/runtime/jsonp chunk loading","webpack://simulation/webpack/startup"],"sourcesContent":["<template>\n  <div>\n    <AnimatedBacteria\n      :IC50=\"animationParams.IC50\"\n      :IC50_initial=\"animationParams.IC50_initial\"\n      :growthRate=\"animationParams.growthRate\"\n      :adaptationRate=\"animationParams.adaptationRate\"\n      :currentDose=\"animationParams.currentDose\"\n    />\n  </div>\n  <div>\n<!--    TODO: declare emit event to update the parameters in the parent component-->\n    <SimulationControls @updateParams=\"updateParams\" />\n\n  </div>\n</template>\n\n<script>\nimport SimulationControls from './components/SimulationControls.vue'\nimport AnimatedBacteria from './components/AnimatedBacteria.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    SimulationControls,\n    AnimatedBacteria\n  },\n  data() {\n    return {\n      animationParams: {\n        IC50: 5,\n        IC50_initial: 5,\n        growthRate: 1,\n        adaptationRate: 0.005,\n        currentDose: 0\n      }\n    }\n  },\n  methods: {\n    updateParams(newParams) {\n      console.log(newParams);\n      this.animationParams = { ...this.animationParams, ...newParams };\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","<template>\r\n  <h1>Evolution Experiment Simulation</h1>\r\n<!--  20px space below slider container -->\r\n  <div class=\"slider-container\" :style=\"{ marginBottom: '10px' }\">\r\n    <button @click=\"togglePlay\" :style=\"{ backgroundColor: isPlaying ? '#E74C3C' : '#3498DB' }\">{{ isPlaying ? 'Pause' : 'Play' }}</button>\r\n    <input\r\n      type=\"range\"\r\n      id=\"timepoint-slider\"\r\n      :min=\"0\"\r\n      :max=\"maxTimepoints\"\r\n      v-model=\"selectedTimepoint\"\r\n    />\r\n  </div>\r\n  <div id=\"plotDiv\"></div>\r\n  <div class=\"settings-container\">\r\n    <!-- Updater Settings -->\r\n    <div class=\"settings-block\">\r\n      <h2>Culture Control Parameters</h2>\r\n      <table class=\"settings-table\">\r\n        <tr v-for=\"(value, key) in updaterSettings\" :key=\"'updater-' + key\">\r\n          <td>{{ key }}</td>\r\n          <td>\r\n            <input\r\n              v-if=\"updaterSettings_bounds[key]\"\r\n              v-model.number=\"updaterSettings[key]\"\r\n              type=\"range\"\r\n              :min=\"updaterSettings_bounds[key][0]\"\r\n              :max=\"updaterSettings_bounds[key][1]\"\r\n              :step=\"updaterSettings_bounds[key][2] || 0.1\"\r\n            />\r\n            <input\r\n              v-else\r\n              v-model.number=\"updaterSettings[key]\"\r\n              type=\"number\"\r\n            />\r\n            {{ updaterSettings[key] }}\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n\r\n    <!-- Model Settings -->\r\n    <div class=\"settings-block\">\r\n      <h2>Culture Growth Model Parameters</h2>\r\n      <table class=\"settings-table\">\r\n        <tr v-for=\"key in modelSettingsKeys\" :key=\"'model-' + key\">\r\n          <td>{{ key }}</td>\r\n          <td><input v-model.number=\"modelSettings[key]\" type=\"number\"></td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n\r\n    <div class=\"outcome\">\r\n      <h2>Outcome</h2>\r\n      <!-- Highlight numbers in bold -->\r\n      <p>Volume Used: {{ volumeUsed }} ml</p>\r\n      <p>IC50 Fold Change: <b>{{ ic50FoldChange }}</b></p>\r\n      <p>Volume per IC50 Doubling: <b>{{ volumePerIC50Doubling }}</b> ml</p>\r\n      <p>Time per IC50 Doubling: <b>{{ timePerIC50Doubling }}</b> hours</p>\r\n\r\n      <label>Duration [h]: </label>\r\n      <input v-model.number=\"simulationHours\" type=\"number\">\r\n      <br>\r\n      <button class=\"run-button\" @click=\"runSimulation\">Recalculate</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"adaptation-rate-plot\"></div>\r\n  <div id=\"mu-plot\"></div>\r\n</template>\r\n\r\n<script>\r\nimport BacteriaGrowthModel from '../models/BacteriaGrowthModel';\r\nimport MorbidostatUpdater from '../models/MorbidostatUpdater';\r\nimport ParameterPlotting from '@/models/ParameterPlotting';\r\nimport Plotly from 'plotly.js-dist-min';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      updaterSettings: {\r\n        doseInitialization: 1,\r\n        odDilutionThreshold: 0.3,\r\n        dilutionFactor: 1.6,\r\n        dilutionNumberFirstDrugAddition: 2,\r\n        doseFirstDrugAddition: 3,\r\n        doseIncreaseFactor: 2,\r\n        doseIncreaseAmount: 0,\r\n        thresholdOdMinIncreaseStress: 0.1,\r\n        thresholdGrowthRateIncreaseStress: 0.15,\r\n        thresholdGrowthRateDecreaseStress: -0.1,\r\n        delayDilutionMaxHours: 4,\r\n        delayStressIncreaseMinGenerations: 2,\r\n        volumeVial: 12,\r\n        pump1StockDrugConcentration: 0,\r\n        pump2StockDrugConcentration: 100\r\n      },\r\n      updaterSettings_bounds: {\r\n        doseInitialization: [0, 10, 0.1],\r\n        odDilutionThreshold: [0, 1, 0.01],\r\n        dilutionFactor: [1, 3, 0.1],\r\n        dilutionNumberFirstDrugAddition: [0, 10, 1],\r\n        doseFirstDrugAddition: [0, 10, 0.1],\r\n        doseIncreaseFactor: [1, 5, 0.1],\r\n        doseIncreaseAmount: [0, 10, 0.1],\r\n        thresholdOdMinIncreaseStress: [0, 1, 0.01],\r\n        thresholdGrowthRateIncreaseStress: [0, 1, 0.01],\r\n        thresholdGrowthRateDecreaseStress: [-1, 0, 0.01],\r\n        delayDilutionMaxHours: [1, 24, 1],\r\n        delayStressIncreaseMinGenerations: [1, 10, 1],\r\n        volumeVial: [1, 20, 0.1],\r\n        pump1StockDrugConcentration: [0, 100, 1],\r\n        pump2StockDrugConcentration: [0, 500, 1]\r\n      },\r\n      modelSettings: {\r\n        initialPopulation: 0.05,\r\n        doublingTimeMins: 20,\r\n        carryingCapacity: 0.9,\r\n        muMin: -0.1,\r\n        ic50Initial: 5,\r\n        ic10Ic50Ratio: 0.5,\r\n        doseEffectiveSlopeWidthMins: 120,\r\n        timeLagDrugEffectMins: 30,\r\n        adaptationRateMax: 0.08,\r\n        adaptationRateIc10Ic50Ratio: 0.8,\r\n        timeCurrent: new Date()\r\n      },\r\n      volumeUsed: 0,\r\n      totalTime: 0,\r\n      ic50FoldChange: 0,\r\n      volumePerIC50Doubling: 0,\r\n      timePerIC50Doubling: 0,\r\n      simulationHours: 48,\r\n      modelSettingsKeys: [\r\n        'initialPopulation',\r\n        'doublingTimeMins',\r\n        'carryingCapacity',\r\n        'muMin',\r\n        'ic50Initial',\r\n        'ic10Ic50Ratio',\r\n        'doseEffectiveSlopeWidthMins',\r\n        'timeLagDrugEffectMins',\r\n        'adaptationRateMax',\r\n        'adaptationRateIc10Ic50Ratio'\r\n      ],\r\n      selectedTimepoint: 0,\r\n      maxTimepoints: 0,\r\n      isPlaying: false,\r\n      playInterval: null\r\n    };\r\n  },\r\n  watch: {\r\n    selectedTimepoint: 'getParametersAtTimepoint',\r\n    updaterSettings: {\r\n      handler: 'runSimulation',\r\n      deep: true // This ensures that changes in object properties are detected\r\n    },\r\n    modelSettings: {\r\n      handler: 'runSimulation',\r\n      deep: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.runSimulation();\r\n  },\r\n  methods: {\r\n    runSimulation() {\r\n      const updater = new MorbidostatUpdater(this.updaterSettings);\r\n      this.model = new BacteriaGrowthModel({\r\n        ...this.modelSettings,\r\n        updater: updater\r\n      });\r\n      this.model.simulateExperiment(this.simulationHours)\r\n      this.plotModelSimulation(this.model, this.simulationHours);\r\n      let [volumeUsed, totalTime, ic50FoldChange] = this.model.getSimulationEfficiency();\r\n      const volumePerIC50Doubling = volumeUsed / Math.log2(ic50FoldChange);\r\n      const timePerIC50Doubling = totalTime / Math.log2(ic50FoldChange);\r\n      this.volumeUsed = volumeUsed.toFixed(1);\r\n      this.totalTime = totalTime.toFixed(1);\r\n      this.ic50FoldChange = ic50FoldChange.toFixed(2);\r\n      this.volumePerIC50Doubling = volumePerIC50Doubling.toFixed(1);\r\n      this.timePerIC50Doubling = timePerIC50Doubling.toFixed(1);\r\n      const parameterPlotting = new ParameterPlotting(this.model);\r\n      parameterPlotting.plot_mu();\r\n      parameterPlotting.plot_adaptation_rate();\r\n      this.maxTimepoints = Math.min(this.model.population.length, this.model.ic50s.length, this.model.effectiveDoses.length, this.model.effectiveGrowthRates.length, this.model.adaptationRates.length) - 1;\r\n    },\r\n    getParametersAtTimepoint() {\r\n      console.log('Selected timepoint:', this.selectedTimepoint);\r\n      if (this.selectedTimepoint > this.maxTimepoints) {\r\n        console.log('Selected timepoint is out of bounds:', this.selectedTimepoint);\r\n        this.selectedTimepoint = this.maxTimepoints;\r\n\r\n      }\r\n      const timepoint_index = this.selectedTimepoint;\r\n\r\n      const dict = {\r\n        population: this.model.population[timepoint_index][0],\r\n        currentDose: this.model.effectiveDoses[timepoint_index][0],\r\n        IC50: this.model.ic50s[timepoint_index][0],\r\n        growthRate: this.model.effectiveGrowthRates[timepoint_index][0],\r\n        adaptationRate: this.model.adaptationRates[timepoint_index][0],\r\n        IC50_initial: this.model.ic50s[0][0],\r\n      }\r\n      this.$emit('update-params', dict);\r\n      return dict;\r\n    },\r\n    plotModelSimulation(model) {\r\n    const times = model.population.map(item => item[1]);\r\n    const ods = model.population.map(item => item[0]);\r\n    const growthRates = model.effectiveGrowthRates.map(item => ({x: item[1], y: item[0]}));\r\n    const ic50s = model.ic50s.map(item => ({x: item[1], y: item[0]}));\r\n    const doses = model.doses.map(item => ({x: item[1], y: item[0]}));\r\n    const adaptationRates = model.adaptationRates.map(item => ({x: item[1], y: item[0]}));\r\n    const generations = model.generations.map(item => ({x: item[1], y: item[0]}));\r\n\r\n    const tracePopulation = {\r\n        x: times,\r\n        y: ods,\r\n        mode: 'markers',\r\n        name: 'Bacteria Population',\r\n        marker: {color: 'black', size: 5}\r\n    };\r\n    const traceGrowthRate = {\r\n        x: growthRates.map(gr => gr.x),\r\n        y: growthRates.map(gr => gr.y),\r\n        mode: 'lines+markers',\r\n        name: 'Effective Growth Rate',\r\n        yaxis: 'y2',\r\n        line: {color: 'blue'}\r\n    };\r\n    const traceIC50 = {\r\n        x: ic50s.map(ic => ic.x),\r\n        y: ic50s.map(ic => ic.y),\r\n        mode: 'lines',\r\n        name: 'IC50',\r\n        yaxis: 'y4',\r\n        line: {color: 'green', width: 1, dash: 'dot'}\r\n    };\r\n    const traceDoses = {\r\n        x: doses.map(d => d.x),\r\n        y: doses.map(d => d.y),\r\n        mode: 'lines+markers',\r\n        name: 'Dose',\r\n        yaxis: 'y4',\r\n        line: {color: 'green', shape: 'hv', width: 2}\r\n    };\r\n    const traceEffectiveDoses = {\r\n        x: model.effectiveDoses.map(ed => ed[1]),\r\n        y: model.effectiveDoses.map(ed => ed[0]),\r\n        mode: 'lines',\r\n        name: 'Effective Dose',\r\n        yaxis: 'y4',\r\n        line: {color: 'green', width: 1}\r\n    };\r\n    const traceAdaptationRates = {\r\n        x: adaptationRates.map(ar => ar.x),\r\n        y: adaptationRates.map(ar => ar.y),\r\n        mode: 'lines',\r\n        name: 'Adaptation Rate',\r\n        yaxis: 'y5',\r\n        line: {color: 'violet'}\r\n    };\r\n    const traceGenerations = {\r\n        x: generations.map(g => g.x),\r\n        y: generations.map(g => g.y),\r\n        mode: 'lines+markers',\r\n        name: 'Generations',\r\n        yaxis: 'y6',\r\n        line: {color: 'red'}\r\n    };\r\n\r\n    const layout = {\r\n        title: '',\r\n        xaxis: {title: 'Time'},\r\n        yaxis: {title: 'Optical Density'},\r\n        yaxis2: {title: 'Effective Growth Rate', overlaying: 'y', side: 'right'},\r\n        yaxis4: {title: 'Dose', overlaying: 'y', side: 'right', position: 0.90},\r\n        yaxis5: {title: 'Adaptation Rate', overlaying: 'y', side: 'right', position: 0.85},\r\n        yaxis6: {title: 'Generations', overlaying: 'y', side: 'right', position: 0.80}\r\n    };\r\n\r\n    const data = [tracePopulation, traceGrowthRate, traceIC50, traceDoses, traceEffectiveDoses, traceAdaptationRates, traceGenerations];\r\n    Plotly.newPlot('plotDiv', data, layout).then(() => {\r\n    }).catch(error => {\r\n        console.error('Error in plotSimulation:', error);\r\n    });\r\n    },\r\n    togglePlay() {\r\n      if (this.isPlaying) {\r\n        clearInterval(this.playInterval);\r\n      } else {\r\n        this.playInterval = setInterval(() => {\r\n          this.selectedTimepoint = parseInt(this.selectedTimepoint)\r\n          if (this.selectedTimepoint < this.maxTimepoints-4) {\r\n            this.selectedTimepoint += 4;\r\n\r\n          } else {\r\n            this.selectedTimepoint = 0;\r\n          }\r\n        }, 0.1); // Adjust the interval as needed\r\n      }\r\n      this.isPlaying = !this.isPlaying;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.container {\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  color: #333;\r\n  padding: 20px;\r\n}\r\n\r\nh1, h2 {\r\n  color: #2C3E50;\r\n}\r\n\r\n.settings-container {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-bottom: 20px;\r\n  font-size: 16px;\r\n}\r\n\r\n.settings-block {\r\n  background: #ECF0F1;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n}\r\n\r\n.settings-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.settings-table td {\r\n  padding: 8px;\r\n  border-top: 1px solid #BDC3C7;\r\n}\r\n\r\ninput[type=\"number\"] {\r\n  width: 80px;\r\n  padding: 8px;\r\n  border: 1px solid #BDC3C7;\r\n  border-radius: 4px;\r\n  box-sizing: border-box; /* Added to include padding in the width */\r\n}\r\n\r\ninput[type=\"range\"] {\r\n  width: 100%;\r\n}\r\n\r\n.outcome {\r\n  background: #ECF0F1;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n  font-size: 26px;\r\n}\r\n\r\n.run-button {\r\n  background-color: #3498DB;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.run-button:hover {\r\n  background-color: #2980B9;\r\n}\r\n\r\n#plotDiv {\r\n  width: 100%;\r\n  height: 800px;\r\n  margin-top: 20px;\r\n}\r\n\r\n#timepoint-slider {\r\n  width: 80%;\r\n  margin-top: 20px;\r\n  display: inline-block;\r\n}\r\nbutton {\r\n  display: inline-block;\r\n  margin-left: 10px;\r\n  padding: 5px 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  background-color: #3498DB;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #2980B9;\r\n}\r\n</style>\r\n","// modelEquations.js\r\n\r\n// Replaces the mu function in Python\r\nfunction mu(dose, muMin, muMax, ic10Ic50Ratio, ic50) {\r\n    const doseIc10 = ic50 * ic10Ic50Ratio;\r\n    const kMu = Math.log(9) / (ic50 - doseIc10);\r\n    return muMin + (muMax / (1 + Math.exp(-kMu * (ic50 - dose))));\r\n}\r\n\r\n// Replaces the doseEffective function in Python\r\nfunction doseEffective(dose, lagTimeHrs, timeSinceAdditionHrs, slopeWidthHrs) {\r\n    const k = Math.log(19) / (0.5 * slopeWidthHrs);\r\n    const xValue = (timeSinceAdditionHrs - lagTimeHrs);\r\n    const effectiveDose = dose / (1 + Math.exp(-k * xValue));\r\n    return effectiveDose;\r\n}\r\n\r\n// Replaces the muEffective function in Python\r\nfunction muEffective(dose, muMin, muMax, ic10Ic50Ratio, ic50, population, carryingCapacity) {\r\n    const growthRate = mu(dose, 0, muMax, ic10Ic50Ratio, ic50);\r\n    return muMin + growthRate * (1 - population / carryingCapacity);\r\n}\r\n\r\n// Replaces the adaptationRate function in Python\r\nfunction adaptationRate(dose, adaptationRateMax, ic50, ic10Ic50Ratio, adaptationRateIc10Ic50Ratio) {\r\n    const ic10 = ic50 * ic10Ic50Ratio;\r\n    const kAdapt = -Math.log(adaptationRateIc10Ic50Ratio) / Math.pow((ic10 - ic50), 2);\r\n    const adaptRate = adaptationRateMax * Math.exp(-kAdapt * Math.pow((dose - ic50), 2));\r\n    return adaptRate;\r\n}\r\n\r\n// Export the functions to be used elsewhere in your application\r\nexport { mu, doseEffective, muEffective, adaptationRate };\r\n","class MorbidostatUpdater {\r\n    constructor(options = {}) {\r\n        const defaults = {\r\n            doseInitialization: 1,\r\n            odDilutionThreshold: 0.3,\r\n            dilutionFactor: 1.6,\r\n            dilutionNumberFirstDrugAddition: 2,\r\n            doseFirstDrugAddition: 3,\r\n            doseIncreaseFactor: 2,\r\n            doseIncreaseAmount: 0,\r\n            thresholdOdMinIncreaseStress: 0.1,\r\n            thresholdGrowthRateIncreaseStress: 0.15,\r\n            thresholdGrowthRateDecreaseStress: -0.1,\r\n            delayDilutionMaxHours: 4,\r\n            delayStressIncreaseMinGenerations: 2,\r\n            volumeVial: 12,\r\n            pump1StockDrugConcentration: 0,\r\n            pump2StockDrugConcentration: 100\r\n        };\r\n\r\n        Object.assign(this, defaults, options);\r\n    }\r\n\r\n    rescueIfNecessary(model) {\r\n        if (model.doses.length < 1) {\r\n            return; // First dilution has not occurred yet, no need to rescue\r\n        }\r\n\r\n        const lastDilutionTime = model.doses[model.doses.length - 1][1];\r\n        const hoursSinceLastDilution = (model.timeCurrent - lastDilutionTime) / 3600000;\r\n        if (hoursSinceLastDilution < this.delayDilutionMaxHours) {\r\n            return; // Last dilution was too recent\r\n        }\r\n\r\n        if (model.growthRate > this.thresholdGrowthRateDecreaseStress) {\r\n            return; // Growth rate is too high, no need to rescue\r\n        }\r\n\r\n        console.log(\"Rescue dilution\"); // All conditions for rescue are met\r\n        model.diluteCulture(0, this.dilutionFactor);\r\n    }\r\n\r\n    calculateIncreasedDose(currentDose) {\r\n        const newDose = currentDose * this.doseIncreaseFactor + this.doseIncreaseAmount;\r\n        return Math.round(newDose * 1000) / 1000; // Keep three decimals\r\n    }\r\n\r\n    diluteToWashIfNeeded(model) {\r\n        const minimumPumpedVolume = 0.1;\r\n        const washingDilutionFactor = 1.2;\r\n        const pump2Volume = minimumPumpedVolume;\r\n        const pump1Volume = this.volumeVial * washingDilutionFactor - pump2Volume;\r\n        const currentDose = model.doses.length > 0 ? model.doses[model.doses.length - 1][0] : 0;\r\n        const totalVolume = this.volumeVial + pump1Volume + pump2Volume;\r\n        const targetDose = (this.volumeVial * currentDose + pump1Volume * this.pump1StockDrugConcentration +\r\n            pump2Volume * this.pump2StockDrugConcentration) / totalVolume;\r\n\r\n        if (!model.population || model.population.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.delayDilutionMaxHours < 0) { // Time triggered dilution disabled\r\n            return;\r\n        }\r\n\r\n        const lastPumpTime = model.doses.length > 0 ? model.doses[model.doses.length - 1][1] : model.firstOdTimestamp;\r\n        const timeDifference = (model.timeCurrent - lastPumpTime) / 3600000;\r\n\r\n        if (timeDifference > this.delayDilutionMaxHours) {\r\n            console.log(\"Washing dilution, target dose\", targetDose, \"time_current\", model.timeCurrent);\r\n            model.diluteCulture(targetDose, washingDilutionFactor);\r\n        }\r\n    }\r\n\r\n    isTimeToIncreaseDose(model) {\r\n        let timeToIncreaseDose = true;\r\n\r\n        if ([this.thresholdGrowthRateIncreaseStress, this.delayStressIncreaseMinGenerations, this.doseIncreaseFactor, this.dilutionNumberFirstDrugAddition].includes(-1)) {\r\n            timeToIncreaseDose = false; // Stress increase disabled\r\n        }\r\n\r\n        if (model.population[model.population.length - 1][0] < this.thresholdOdMinIncreaseStress) {\r\n            timeToIncreaseDose = false; // OD too low\r\n        }\r\n\r\n        if (model.growthRate < this.thresholdGrowthRateIncreaseStress) {\r\n            timeToIncreaseDose = false; // Growth rate too low\r\n        }\r\n\r\n        if (this.delayStressIncreaseMinGenerations !== -1 && model.doses.length > 0) {\r\n            const lastDoseChangeTime = model.doses.reduceRight((acc, dose, index, array) => {\r\n                if (acc !== null) {\r\n                    return acc;  // If already found, keep returning the found value\r\n                }\r\n                if (index > 0 && dose[0] !== array[index - 1][0]) {\r\n                    return dose[1];  // Return the timestamp of the dose change\r\n                }\r\n                return null;  // Continue if no change is found yet\r\n            }, null);\r\n\r\n            const generationAtLastDoseChange = model.generations.find(gen => gen[1] >= lastDoseChangeTime)[0];\r\n            const generationsSinceLastDoseChange = model.generations[model.generations.length - 1][0] - generationAtLastDoseChange;\r\n\r\n            if (generationsSinceLastDoseChange <= this.delayStressIncreaseMinGenerations) {\r\n                timeToIncreaseDose = false; // Stress increase too recent\r\n            }\r\n        }\r\n\r\n        if (model.doses.length < this.dilutionNumberFirstDrugAddition) {\r\n            timeToIncreaseDose = false; // No stress increase before initial drug addition\r\n        }\r\n\r\n        return timeToIncreaseDose;\r\n    }\r\n\r\n    isTooEarlyForRegularDilution(model) {\r\n        if (model.population.length === 0) {\r\n            return true; // No OD measurements yet\r\n        }\r\n\r\n        if (model.doses.length > 0) {\r\n            const odTimestamp = model.population[model.population.length - 1][1];\r\n            const dosesTimestamp = model.doses[model.doses.length - 1][1];\r\n            const minimumDurationMinutes = 1;\r\n\r\n            if (odTimestamp < dosesTimestamp + minimumDurationMinutes * 60000) {\r\n                return true; // No OD measurement since the last dilution\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isTimeToDilute(model) {\r\n        if (this.odDilutionThreshold !== -1 && model.population[model.population.length - 1][0] >= this.odDilutionThreshold) {\r\n            return true; // OD threshold reached\r\n        }\r\n\r\n        if (this.delayDilutionMaxHours !== -1) {\r\n            if (model.doses.length > 0) {\r\n                const timeDifference = (model.timeCurrent - model.doses[model.doses.length - 1][1]) / 3600000;\r\n                if (timeDifference > this.delayDilutionMaxHours) {\r\n                    return true; // Time threshold reached\r\n                }\r\n            } else {\r\n                const timeSinceLastDilution = (model.timeCurrent - model.firstOdTimestamp) / 3600000;\r\n                if (timeSinceLastDilution > this.delayDilutionMaxHours) {\r\n                    return true; // Time threshold reached\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    update(model) {\r\n        // Initialization dose immediately after experiment start\r\n        if (this.doseInitialization > 0 && model.doses.length === 0) {\r\n            model.diluteCulture(this.doseInitialization);\r\n            return;\r\n        }\r\n\r\n        // Check if it is too early for regular dilution\r\n        if (this.isTooEarlyForRegularDilution(model)) {\r\n            return;\r\n        }\r\n\r\n        // Regular dilution\r\n        if (this.isTimeToDilute(model)) {\r\n            let targetDose;\r\n            if (this.dilutionNumberFirstDrugAddition < 0) {\r\n                targetDose = this.pump1StockDrugConcentration;\r\n            } else if (model.doses.length === this.dilutionNumberFirstDrugAddition - 1) {\r\n                targetDose = this.doseFirstDrugAddition;\r\n            } else {\r\n                targetDose = model.doses.length > 0 ? model.doses[model.doses.length - 1][0] : this.pump1StockDrugConcentration;\r\n                if (model.doses.length > this.dilutionNumberFirstDrugAddition && this.isTimeToIncreaseDose(model)) {\r\n                    targetDose = this.calculateIncreasedDose(model.doses[model.doses.length - 1][0]);\r\n                }\r\n            }\r\n            model.diluteCulture(targetDose);\r\n            return;\r\n        }\r\n        this.rescueIfNecessary(model);\r\n        this.diluteToWashIfNeeded(model);\r\n    }\r\n}\r\n\r\nexport default MorbidostatUpdater;\r\n","import {adaptationRate, doseEffective, muEffective} from './ModelEquations.js';\r\nimport MorbidostatUpdater from './MorbidostatUpdater.js';\r\n\r\n\r\nclass BacteriaGrowthModel {\r\n    constructor(options = {}) {\r\n        // Default values\r\n        this.defaults = {\r\n            initialPopulation: 0.01,\r\n            doublingTimeMins: 20,\r\n            carryingCapacity: 0.9,\r\n            muMin: -0.1,\r\n            ic50Initial: 5,\r\n            ic10Ic50Ratio: 0.5,\r\n            doseEffectiveSlopeWidthMins: 120,\r\n            timeLagDrugEffectMins: 30,\r\n            adaptationRateMax: 0.08,\r\n            adaptationRateIc10Ic50Ratio: 0.8,\r\n            generationCurrent: 0,\r\n            drugConcentration: 0,\r\n            effectiveDose: 0,\r\n            timeCurrent: new Date(),  // This will handle the current time\r\n            updater: new MorbidostatUpdater()  // Placeholder for an update method class\r\n        };\r\n\r\n        // Merge defaults with user-provided options\r\n        Object.assign(this, this.defaults, options);\r\n\r\n        // Calculate maximum growth rate from doubling time\r\n        this.muMax = Math.log(2) / (this.doublingTimeMins / 60);\r\n\r\n        // Initialize model state\r\n        this.initializeModelState();\r\n    }\r\n\r\n    initializeModelState() {\r\n        this.timeCurrent = new Date();\r\n        this.population = [];\r\n        this.generations = [];\r\n        this.doses = [];\r\n        this.effectiveDoses = [];\r\n        this.ic50s = [[this.ic50Initial, this.timeCurrent]];\r\n        this.effectiveGrowthRates = [];\r\n        this.adaptationRates = [];\r\n    }\r\n\r\n    get growthRate() {\r\n        return this.effectiveGrowthRates.length ? this.effectiveGrowthRates[this.effectiveGrowthRates.length - 1][0] : 0;\r\n    }\r\n\r\n    calculateEffectiveDose(timeCurrent) {\r\n        // Check if there are any effective doses yet\r\n        if (this.effectiveDoses.length === 0) {\r\n            let currentEffectiveDose = this.doses.length > 0 ? this.doses[0][0] : 0;\r\n            this.effectiveDoses.push([currentEffectiveDose, this.timeCurrent]);\r\n        }\r\n\r\n        let effectiveDose = this.effectiveDoses[0][0];  // Initial effective dose\r\n        const initialEquilibriumDose = 0; // Define initial equilibrium dose\r\n        if (this.doses.length > 1) {\r\n            // Include initial equilibrium dose for calculation\r\n            const doses = [initialEquilibriumDose].concat(this.doses.map(dose => dose[0]));\r\n            const dilutionTimes = this.doses.map(dose => dose[1]);\r\n\r\n            // Loop through all added doses starting from the first computed difference\r\n            for (let i = 1; i < doses.length; i++) {\r\n                let addedDose = doses[i] - doses[i - 1];\r\n                if (addedDose === 0) continue;\r\n\r\n                // Calculate hours since the drug was added\r\n                let timeSinceAdditionHrs = (timeCurrent - dilutionTimes[i - 1]) / 3600000;  // Convert milliseconds to hours\r\n                effectiveDose += doseEffective(addedDose, this.timeLagDrugEffectMins / 60, timeSinceAdditionHrs, this.doseEffectiveSlopeWidthMins / 60);\r\n            }\r\n        }\r\n        // this.effectiveDoses.push([effectiveDose, this.timeCurrent]);\r\n        return effectiveDose;\r\n    }\r\n\r\n    simulateExperimentMinute() {\r\n        let effectiveDose = this.calculateEffectiveDose(this.timeCurrent);\r\n        this.effectiveDoses.push([effectiveDose, this.timeCurrent]);\r\n        let effectiveGrowthRate = 0;\r\n        if (this.population.length) {\r\n            effectiveGrowthRate = muEffective(effectiveDose, this.muMin, this.muMax, this.ic10Ic50Ratio,\r\n                this.ic50s[this.ic50s.length - 1][0], this.population[this.population.length - 1][0], this.carryingCapacity);\r\n            this.effectiveGrowthRates.push([effectiveGrowthRate, this.timeCurrent]);\r\n        }\r\n\r\n        if (effectiveDose > 0) {\r\n            let adaptRate = adaptationRate(effectiveDose, this.adaptationRateMax, this.ic50s[this.ic50s.length - 1][0],\r\n                this.ic10Ic50Ratio, this.adaptationRateIc10Ic50Ratio);\r\n            this.adaptationRates.push([adaptRate, this.timeCurrent]);\r\n\r\n            let ic50 = this.ic50s[this.ic50s.length - 1][0] * Math.exp(adaptRate / 60);\r\n            this.ic50s.push([ic50, this.timeCurrent]);\r\n        }\r\n        else {\r\n            this.adaptationRates.push([0, this.timeCurrent]);\r\n            this.ic50s.push([this.ic50Initial, this.timeCurrent]);\r\n        }\r\n\r\n        let newPopulation = this.population.length ? this.population[this.population.length - 1][0] * Math.exp(effectiveGrowthRate / 60) : this.initialPopulation;\r\n        this.population.push([newPopulation, this.timeCurrent]);\r\n        this.updater.update(this);\r\n    }\r\n\r\n    diluteCulture(targetDose = 0, dilutionFactor = 1.6) {\r\n        dilutionFactor = this.updater.dilutionFactor;\r\n        // Assume updater object contains necessary properties and methods\r\n        const addedVolume = this.updater.volumeVial * (dilutionFactor - 1);\r\n        const stockConcentrationHigh = this.updater.pump2StockDrugConcentration;\r\n        const stockConcentrationLow = this.updater.pump1StockDrugConcentration;\r\n        const currentDose = this.drugConcentration;\r\n        const currentVolume = this.updater.volumeVial;\r\n\r\n        // Calculate the maximum and minimum possible new doses\r\n        const maxDose = (currentDose * currentVolume + stockConcentrationHigh * addedVolume) / (currentVolume + addedVolume);\r\n        const minDose = (currentDose * currentVolume + stockConcentrationLow * addedVolume) / (currentVolume + addedVolume);\r\n\r\n        // Ensure the target dose is within the calculated range\r\n        targetDose = Math.min(targetDose, maxDose);\r\n        targetDose = Math.max(targetDose, minDose);\r\n\r\n        // Calculate the added dose to reach the target dose\r\n        const addedDose = targetDose - currentDose;\r\n        this.drugConcentration += addedDose;\r\n\r\n        // Update the model's doses record\r\n        this.doses.push([this.drugConcentration, this.timeCurrent]);\r\n\r\n        // Adjust the population size based on the dilution factor\r\n        if (this.population.length > 0) {\r\n            const lastPopulation = this.population[this.population.length - 1][0] / dilutionFactor;\r\n            this.population[this.population.length - 1] = [lastPopulation, this.timeCurrent];\r\n        }\r\n\r\n        // Update generation number based on dilution\r\n        let generationNumber = Math.log2(dilutionFactor);\r\n        if (this.generations.length > 0) {\r\n            generationNumber += this.generations[this.generations.length - 1][0];\r\n        }\r\n        this.generations.push([generationNumber, this.timeCurrent]);\r\n    }\r\n\r\n    simulateExperiment(simulationHours = 48) {\r\n        for (let t = 1; t <= simulationHours * 60; t++) {\r\n            this.timeCurrent = new Date(this.timeCurrent.getTime() + 60000);  // Add one minute\r\n            this.simulateExperimentMinute();\r\n        }\r\n    }\r\n    // plotSimulation(simulationHours = 48) {\r\n    //     // use method below to plot the simulation\r\n    //     // data, layout = plotModelSimulation(this, simulationHours);\r\n    //     // const (data, layout) = plotModelSimulation(this, simulationHours);\r\n    //     // unrwap output of plotModelSimulation\r\n    //     const plot = plotModelSimulation(this, simulationHours);\r\n    // }\r\n    getSimulationEfficiency() {\r\n        const dilutionFactor = this.updater.dilutionFactor;\r\n        const addedVolume = this.updater.volumeVial * (dilutionFactor - 1);\r\n        const volumeUsed = this.doses.length * addedVolume;\r\n        const ic50FoldChange = this.ic50s[this.ic50s.length - 1][0] / this.ic50s[0][0];\r\n        const totalTime = (this.population[this.population.length - 1][1] - this.population[0][1]) / 3600000;\r\n        // const volumePerIC50Doubling = volumeUsed / Math.log2(ic50FoldChange);\r\n        // const timePerIC50Doubling = totalTime / Math.log2(ic50FoldChange);\r\n        // console.log(`Volume Used: ${volumeUsed.toFixed(1)} ml, Total Time: ${totalTime.toFixed(1)} hours, IC50 fold change: ${ic50FoldChange.toFixed(2)}`);\r\n        // console.log(`Volume per IC50 doubling: ${volumePerIC50Doubling.toFixed(1)} ml`);\r\n        // console.log(`Time per IC50 doubling: ${timePerIC50Doubling.toFixed(1)} hours`);\r\n        return [volumeUsed, totalTime, ic50FoldChange];\r\n    }\r\n\r\n}\r\n\r\nexport default BacteriaGrowthModel;\r\n","import { muEffective, adaptationRate } from './ModelEquations.js';\r\n\r\nimport Plotly from 'plotly.js-dist-min';\r\n\r\n\r\n// usage in vue:\r\n// import ParameterPlotting from '@/models/ParameterPlotting';\r\n// const parameterPlotting = new ParameterPlotting(model);\r\n// parameterPlotting.plot_mu();\r\n\r\nexport default class ParameterPlotting {\r\n    constructor(model = null) {\r\n        this.model = model;\r\n    }\r\n\r\n    plot_mu() {\r\n        const doses = Array.from({ length: 1000 }, (_, i) => i * 0.1);\r\n        const muMin = this.model.muMin;\r\n        const muMax = this.model.muMax;\r\n        const ic50 = this.model.ic50Initial;\r\n        const ic10Ic50Ratio = this.model.ic10Ic50Ratio;\r\n\r\n        const muValues = doses.map(dose => muEffective(dose, muMin, muMax, ic10Ic50Ratio, ic50, 0.5, 1));\r\n\r\n        const data = [\r\n        {\r\n            x: doses,\r\n            y: muValues,\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n            line: {\r\n            color: 'blue',\r\n            },\r\n        },\r\n        ];\r\n\r\n        const layout = {\r\n        title: 'Effect of Drug Dose on Growth Rate',\r\n        xaxis: {\r\n            title: 'Effective Drug Dose',\r\n        },\r\n        yaxis: {\r\n            title: 'Growth Rate [1/hour]',\r\n        },\r\n        };\r\n\r\n        Plotly.newPlot('mu-plot', data, layout);\r\n    }\r\n\r\n    plot_adaptation_rate() {\r\n    const doses = Array.from({ length: 1000 }, (_, i) => i * 0.1);\r\n    const adaptationRateMax = this.model.adaptationRateMax;\r\n    const ic50 = this.model.ic50Initial;\r\n    const ic10Ic50Ratio = this.model.ic10Ic50Ratio;\r\n    const adaptationRateIc10Ic50Ratio = this.model.adaptationRateIc10Ic50Ratio;\r\n\r\n    // Generate y values for each dose using the adaptationRate function\r\n    const yValues = doses.map(dose => adaptationRate(dose, adaptationRateMax, ic50, ic10Ic50Ratio, adaptationRateIc10Ic50Ratio));\r\n\r\n    const data = [{\r\n        x: doses,\r\n        y: yValues,\r\n        type: 'scatter',\r\n        mode: 'lines',\r\n        line: {\r\n            color: 'black',\r\n        },\r\n    }];\r\n\r\n    const layout = {\r\n        title: 'Effect of Antibiotic Dose on Adaptation Rate',\r\n        xaxis: {\r\n            title: 'Effective Antibiotic Dose',\r\n        },\r\n        yaxis: {\r\n            title: 'Adaptation Rate [1/hour]',\r\n        },\r\n    };\r\n\r\n    Plotly.newPlot('adaptation-rate-plot', data, layout);\r\n}\r\n}\r\n","import { render } from \"./SimulationControls.vue?vue&type=template&id=a1fccbbe\"\nimport script from \"./SimulationControls.vue?vue&type=script&lang=js\"\nexport * from \"./SimulationControls.vue?vue&type=script&lang=js\"\n\nimport \"./SimulationControls.vue?vue&type=style&index=0&id=a1fccbbe&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div>\r\n    <!-- Lottie animation container -->\r\n    <div class=\"animation-wrapper\" :style=\"{ backgroundColor: backgroundColor }\">\r\n      <div class=\"bact-wrapper\">\r\n        <div ref=\"bactAnimationContainer\" :style=\"{ width: `${animationSize}px`, height: `${animationSize}px` }\" class=\"lottie-animation\" />\r\n        <div ref=\"dnaAnimationContainer\" :style=\"{ width: `${animationSize}px`, height: `${animationSize}px` }\" class=\"lottie-animation dna-overlay\" />\r\n        <div ref=\"hammerAnimationContainer\" :style=\"{ width: `${animationSize}px`, height: `${animationSize}px` }\" class=\"lottie-animation hammer-overlay\" />\r\n        <div ref=\"shieldAnimationContainer\" :style=\"{ width: `${animationSize}px`, height: `${animationSize}px`, transform: `scaleX(-1) translateY(50px) translateX(-200px) scale(${shieldSize})`, opacity: shieldOpacity }\" class=\"lottie-animation shield-overlay\" />\r\n      </div>\r\n      <div class=\"death-wrapper\" :style=\"{ width: `${animationSize}px`, height: `${animationSize}px`,transform: `translateX(300px)` }\">\r\n        <div ref=\"deathAnimationContainer\" :style=\"{ width: `${animationSize}px`, height: `${animationSize}px`, transform: `translateX(${deathPosition}px) scale(${deathScale})` }\" class=\"lottie-animation death-overlay\" />\r\n      </div>\r\n    </div>\r\n\r\n<!--    <div class=\"controls\">-->\r\n<!--      &lt;!&ndash; DNA animation speed slider &ndash;&gt;-->\r\n<!--      <label for=\"adaptationRate\">Adaptation rate: {{ adaptationRate }}</label>-->\r\n<!--      <input type=\"range\" id=\"adaptationRate\" class=\"slider\" :min=\"0\" :max=\"0.1\" :step=\"0.001\" v-model=\"adaptationRate\" />-->\r\n\r\n<!--      <label for=\"growthRate\">Growth Rate: {{ growthRate }}</label>-->\r\n<!--      <input type=\"range\" id=\"growthRate\" class=\"slider\" :min=\"-0.1\" :max=\"2\" :step=\"0.01\" v-model=\"growthRate\" />-->\r\n<!--      <label for=\"dose\">Current Concentration: {{ currentDose }}</label>-->\r\n<!--      <input type=\"range\" id=\"currentDose\" class=\"slider\" :min=\"0\" :max=\"100\" :step=\"1\" v-model=\"currentDose\" />-->\r\n<!--      &lt;!&ndash; Slider for currentIC50&ndash;&gt;-->\r\n<!--      <label for=\"IC50\">Half-Inhibitory Concentration: {{ IC50 }}</label>-->\r\n<!--      <input type=\"range\" id=\"IC50\" class=\"slider\" :min=\"0\" :max=\"100\" :step=\"1\" v-model=\"IC50\" />-->\r\n<!--    </div>-->\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport lottie from 'lottie-web';\r\n\r\nexport default {\r\n  name: 'LottieAnimation',\r\n  props: {\r\n    IC50: {\r\n      type: Number,\r\n      default: 4,\r\n    },\r\n    IC50_initial: {\r\n      type: Number,\r\n      default: 5,\r\n    },\r\n    growthRate: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    adaptationRate: {\r\n      type: Number,\r\n      default: 0.005,\r\n    },\r\n    currentDose: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      bactPath: '/replifactory_simulate/bact.json', // Path to the animation file\r\n      dnaPath: '/DNA3.json', // Path to the animation file\r\n      hammerPath: '/hammer2.json', // Path to the animation file\r\n      shieldPath: '/shield.json', // Path to the animation file\r\n      shieldSize: 0, // Default size\r\n      shieldOpacity: 0.7, // Default opacity\r\n\r\n      deathPath: '/death.json', // Path to the animation file\r\n      deathDistance: 1, // Default distance\r\n      deathPosition: 900, // Default death position\r\n\r\n      animationSize: 800, // Default size\r\n      backgroundShade: 0, // Default green shade\r\n      deathScale: 1, // Default death scale\r\n\r\n      // growthRate: 1, // Default speed\r\n      // currentDose: 0,\r\n      // adaptationRate: 0.005, // Default speed\r\n      // IC50_initial: 5,\r\n      // IC50: 5,\r\n    };\r\n  },\r\n  computed: {\r\n    backgroundColor() {\r\n      return `rgb(255, ${255 - this.backgroundShade},  ${255 - this.backgroundShade})`;\r\n    },\r\n  },\r\n  watch: {\r\n    IC50: 'updateShieldProperties',\r\n    growthRate: 'updateGrowthRate',\r\n    adaptationRate: 'updateAdaptation',\r\n    currentDose: 'updateBackgroundShade',\r\n\r\n  },\r\n  mounted() {\r\n    this.loadAllAnimations().then(() => {\r\n      // Manually trigger watchers to set initial values\r\n      this.updateShieldProperties(this.IC50);\r\n      this.updateGrowthRate(this.growthRate);\r\n      this.updateAdaptation(this.adaptationRate);\r\n      this.updateBackgroundShade(this.currentDose);\r\n    });\r\n  },\r\n  methods: {\r\n    updateShieldProperties(newIC50) {\r\n      const Adaptation = newIC50 / this.IC50_initial;\r\n      const MaxShieldSize = 1.5;\r\n      const MinShieldSize = 0.2;\r\n      const MaxMaxAdaptation = 15;\r\n      const MaxAdaptation = 10;\r\n      const MinAdaptation = 2;\r\n      const MaxOpacity = 0.9;\r\n      const MinOpacity = 0.7;\r\n\r\n      if (Adaptation < MinAdaptation) {\r\n        this.shieldSize = 0;\r\n      } else if (Adaptation < MaxAdaptation) {\r\n        this.shieldSize = (Adaptation - MinAdaptation) * (MaxShieldSize - MinShieldSize) / (MaxAdaptation - MinAdaptation) + MinShieldSize;\r\n      } else {\r\n        this.shieldSize = MaxShieldSize;\r\n      }\r\n\r\n      if (Adaptation < MaxAdaptation) {\r\n        this.shieldOpacity = MinOpacity;\r\n      } else if (Adaptation < MaxMaxAdaptation) {\r\n        this.shieldOpacity = (Adaptation - MaxAdaptation) * (MaxOpacity - MinOpacity) / (MaxMaxAdaptation - MaxAdaptation) + MinOpacity;\r\n      } else {\r\n        this.shieldOpacity = MaxOpacity;\r\n      }\r\n    },\r\n    updateGrowthRate(newRate) {\r\n      const minAnimationSize = 600;\r\n      const maxAnimationSize = 800;\r\n      const newSpeed = newRate * 10 / 2;\r\n\r\n      if (newRate < 0) {\r\n        const minRate = -0.1;\r\n        const maxRate = 0;\r\n        this.animationSize = minAnimationSize + (newRate - minRate) * (maxAnimationSize - minAnimationSize) / (maxRate - minRate);\r\n        this.bactAnimation.setSpeed(0);\r\n      } else {\r\n        this.bactAnimation.setSpeed(newSpeed);\r\n      }\r\n      if (newRate > 0.1) {\r\n        this.deathPosition = 1200;\r\n      } else if (newRate < -0.1) {\r\n        this.deathPosition = 0;\r\n      } else {\r\n        this.deathPosition = 600 + (newRate * 6000);\r\n      }\r\n    },\r\n    updateAdaptation(newRate) {\r\n      const maxSpeed = 2;\r\n      const minSpeed = 0.1;\r\n      const maxRate = 0.1;\r\n      const minRate = 0.01;\r\n      const ratio = Math.abs((newRate - minRate) / (maxRate - minRate))\r\n      const newSpeed = minSpeed + ratio * (maxSpeed - minSpeed);\r\n\r\n      this.dnaAnimation.setSpeed(newSpeed);\r\n      if (newRate > minRate) {\r\n        if (this.hammerAnimation.currentFrame === 90) {\r\n          this.hammerAnimation.playSegments([0, 69], true);\r\n        }\r\n        this.hammerAnimation.setSpeed(newSpeed);\r\n      } else {\r\n        this.hammerAnimation.goToAndStop(90, true);\r\n      }\r\n    },\r\n    updateBackgroundShade(newDose) {\r\n      this.backgroundShade = Math.round((newDose / 100) * 255);\r\n    },\r\n    async loadGenericAnimation(path, container) {\r\n      const response = await fetch(path);\r\n      const animationData = await response.json();\r\n      return lottie.loadAnimation({\r\n        container: container,\r\n        renderer: 'svg',\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData,\r\n      });\r\n    },\r\n    async loadAllAnimations() {\r\n      this.bactAnimation = await this.loadGenericAnimation(this.bactPath, this.$refs.bactAnimationContainer);\r\n      this.dnaAnimation = await this.loadGenericAnimation(this.dnaPath, this.$refs.dnaAnimationContainer);\r\n      this.hammerAnimation = await this.loadGenericAnimation(this.hammerPath, this.$refs.hammerAnimationContainer);\r\n      const hammerAnimationData = this.hammerAnimation.animationData;\r\n      hammerAnimationData.layers.splice(1, 1); // Assuming layer index 1 to be removed\r\n      this.hammerAnimation.destroy();\r\n      this.hammerAnimation = lottie.loadAnimation({\r\n        container: this.$refs.hammerAnimationContainer,\r\n        renderer: 'svg',\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: hammerAnimationData,\r\n      });\r\n      this.shieldAnimation = await this.loadGenericAnimation(this.shieldPath, this.$refs.shieldAnimationContainer);\r\n      const shieldAnimationData = this.shieldAnimation.animationData;\r\n      shieldAnimationData.layers.splice(3, 1); // Assuming layer index 3 to be removed\r\n      shieldAnimationData.layers.splice(4, 1); // Assuming layer index 4 to be removed\r\n      shieldAnimationData.layers.splice(5, 1); // Assuming layer index 5 to be removed\r\n      this.shieldAnimation.destroy();\r\n      this.shieldAnimation = lottie.loadAnimation({\r\n        container: this.$refs.shieldAnimationContainer,\r\n        renderer: 'svg',\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: shieldAnimationData,\r\n      });\r\n      this.deathAnimation = await this.loadGenericAnimation(this.deathPath, this.$refs.deathAnimationContainer);\r\n      const deathAnimationData = this.deathAnimation.animationData;\r\n      deathAnimationData.layers.splice(39, 1); // Assuming layer index 39 to be removed\r\n      this.deathAnimation.destroy();\r\n      this.deathAnimation = lottie.loadAnimation({\r\n        container: this.$refs.deathAnimationContainer,\r\n        renderer: 'svg',\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: deathAnimationData,\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.animation-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  height: 600px;\r\n  margin-bottom: 20px;\r\n  flex-wrap: nowrap;\r\n}\r\n\r\n.bact-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  height: 600px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.lottie-animation {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.dna-overlay {\r\n  position: absolute;\r\n  transform: scale(0.25);\r\n}\r\n.hammer-overlay {\r\n  transform: scaleX(-1) translateY(100px) translateX(-100px) scale(0.3);\r\n  position: absolute;\r\n}\r\n\r\n.shield-overlay {\r\n  position: absolute;\r\n}\r\n\r\n.death-wrapper {\r\n  position: absolute;\r\n}\r\n\r\n.death-overlay {\r\n  position: absolute;\r\n}\r\n\r\n.controls {\r\n  margin-top: 20px;\r\n}\r\n\r\n.slider {\r\n  width: 100%;\r\n  margin: 10px 0;\r\n}\r\n</style>\r\n","import { render } from \"./AnimatedBacteria.vue?vue&type=template&id=6697219d&scoped=true\"\nimport script from \"./AnimatedBacteria.vue?vue&type=script&lang=js\"\nexport * from \"./AnimatedBacteria.vue?vue&type=script&lang=js\"\n\nimport \"./AnimatedBacteria.vue?vue&type=style&index=0&id=6697219d&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-6697219d\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=00fdbec8\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=00fdbec8&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksimulation\"] = self[\"webpackChunksimulation\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(9489); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementBlock","_Fragment","_createElementVNode","_createVNode","_component_AnimatedBacteria","IC50","$data","animationParams","IC50_initial","growthRate","adaptationRate","currentDose","_component_SimulationControls","onUpdateParams","$options","updateParams","class","style","marginBottom","id","_hoisted_1","_hoisted_2","onClick","_cache","args","togglePlay","_normalizeStyle","backgroundColor","isPlaying","type","min","max","maxTimepoints","$event","selectedTimepoint","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_renderList","updaterSettings","value","key","_toDisplayString","updaterSettings_bounds","step","_hoisted_9","number","_hoisted_10","_createTextVNode","_hoisted_11","_hoisted_12","_hoisted_13","modelSettingsKeys","modelSettings","_hoisted_14","_hoisted_15","_hoisted_16","volumeUsed","ic50FoldChange","volumePerIC50Doubling","timePerIC50Doubling","_hoisted_17","simulationHours","_hoisted_18","runSimulation","_hoisted_19","_hoisted_20","mu","dose","muMin","muMax","ic10Ic50Ratio","ic50","doseIc10","kMu","Math","log","exp","doseEffective","lagTimeHrs","timeSinceAdditionHrs","slopeWidthHrs","k","xValue","effectiveDose","muEffective","population","carryingCapacity","adaptationRateMax","adaptationRateIc10Ic50Ratio","ic10","kAdapt","pow","adaptRate","MorbidostatUpdater","constructor","options","defaults","doseInitialization","odDilutionThreshold","dilutionFactor","dilutionNumberFirstDrugAddition","doseFirstDrugAddition","doseIncreaseFactor","doseIncreaseAmount","thresholdOdMinIncreaseStress","thresholdGrowthRateIncreaseStress","thresholdGrowthRateDecreaseStress","delayDilutionMaxHours","delayStressIncreaseMinGenerations","volumeVial","pump1StockDrugConcentration","pump2StockDrugConcentration","Object","assign","this","rescueIfNecessary","model","doses","length","lastDilutionTime","hoursSinceLastDilution","timeCurrent","console","diluteCulture","calculateIncreasedDose","newDose","round","diluteToWashIfNeeded","minimumPumpedVolume","washingDilutionFactor","pump2Volume","pump1Volume","totalVolume","targetDose","lastPumpTime","firstOdTimestamp","timeDifference","isTimeToIncreaseDose","timeToIncreaseDose","includes","lastDoseChangeTime","reduceRight","acc","index","array","generationAtLastDoseChange","generations","find","gen","generationsSinceLastDoseChange","isTooEarlyForRegularDilution","odTimestamp","dosesTimestamp","minimumDurationMinutes","isTimeToDilute","timeSinceLastDilution","update","BacteriaGrowthModel","initialPopulation","doublingTimeMins","ic50Initial","doseEffectiveSlopeWidthMins","timeLagDrugEffectMins","generationCurrent","drugConcentration","Date","updater","initializeModelState","effectiveDoses","ic50s","effectiveGrowthRates","adaptationRates","calculateEffectiveDose","currentEffectiveDose","push","initialEquilibriumDose","concat","map","dilutionTimes","i","addedDose","simulateExperimentMinute","effectiveGrowthRate","newPopulation","addedVolume","stockConcentrationHigh","stockConcentrationLow","currentVolume","maxDose","minDose","lastPopulation","generationNumber","log2","simulateExperiment","t","getTime","getSimulationEfficiency","totalTime","ParameterPlotting","plot_mu","Array","from","_","muValues","data","x","y","mode","line","color","layout","title","xaxis","yaxis","Plotly","plot_adaptation_rate","yValues","playInterval","watch","handler","deep","mounted","methods","plotModelSimulation","toFixed","parameterPlotting","getParametersAtTimepoint","timepoint_index","dict","$emit","times","item","ods","growthRates","tracePopulation","name","marker","size","traceGrowthRate","gr","traceIC50","ic","width","dash","traceDoses","d","shape","traceEffectiveDoses","ed","traceAdaptationRates","ar","traceGenerations","g","yaxis2","overlaying","side","yaxis4","position","yaxis5","yaxis6","then","catch","error","clearInterval","setInterval","parseInt","__exports__","ref","animationSize","height","transform","shieldSize","opacity","shieldOpacity","deathPosition","deathScale","props","Number","default","bactPath","dnaPath","hammerPath","shieldPath","deathPath","deathDistance","backgroundShade","computed","loadAllAnimations","updateShieldProperties","updateGrowthRate","updateAdaptation","updateBackgroundShade","newIC50","Adaptation","MaxShieldSize","MinShieldSize","MaxMaxAdaptation","MaxAdaptation","MinAdaptation","MaxOpacity","MinOpacity","newRate","minAnimationSize","maxAnimationSize","newSpeed","minRate","maxRate","bactAnimation","setSpeed","maxSpeed","minSpeed","ratio","abs","dnaAnimation","hammerAnimation","currentFrame","playSegments","goToAndStop","loadGenericAnimation","path","container","response","fetch","animationData","json","lottie","renderer","loop","autoplay","$refs","bactAnimationContainer","dnaAnimationContainer","hammerAnimationContainer","hammerAnimationData","layers","splice","destroy","shieldAnimation","shieldAnimationContainer","shieldAnimationData","deathAnimation","deathAnimationContainer","deathAnimationData","components","SimulationControls","AnimatedBacteria","newParams","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","amdO","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","r","n","getter","__esModule","a","definition","o","defineProperty","enumerable","get","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}
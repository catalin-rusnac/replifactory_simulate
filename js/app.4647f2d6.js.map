{"version":3,"file":"js/app.4647f2d6.js","mappings":"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","sources":["webpack://simulation/./src/App.vue","webpack://simulation/./src/components/SimulationComponent.vue","webpack://simulation/./src/models/ModelEquations.js","webpack://simulation/./src/models/MorbidostatUpdater.js","webpack://simulation/./src/models/BacteriaGrowthModel.js","webpack://simulation/./src/models/ParameterPlotting.js","webpack://simulation/./src/components/SimulationComponent.vue?c66e","webpack://simulation/./src/components/TableComponent.vue","webpack://simulation/./src/components/TableComponent.vue?e780","webpack://simulation/./src/App.vue?7ccd","webpack://simulation/./src/main.js","webpack://simulation/webpack/bootstrap","webpack://simulation/webpack/runtime/chunk loaded","webpack://simulation/webpack/runtime/compat get default export","webpack://simulation/webpack/runtime/define property getters","webpack://simulation/webpack/runtime/global","webpack://simulation/webpack/runtime/hasOwnProperty shorthand","webpack://simulation/webpack/runtime/jsonp chunk loading","webpack://simulation/webpack/startup"],"sourcesContent":["<template>\n  <div>\n    <TableComponent/>\n  <SimulationComponent msg=\"Welcome to Your Vue.js App\"/>\n\n  </div>\n</template>\n\n<script>\nimport SimulationComponent from './components/SimulationComponent.vue'\nimport TableComponent from './components/TableComponent.vue'\nexport default {\n  name: 'App',\n  components: {\n    SimulationComponent,\n    TableComponent\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","<template>\r\n    <h1>Evolution Experiment Simulation</h1>\r\n    <div class=\"settings-container\">\r\n      <!-- Updater Settings -->\r\n      <div class=\"settings-block\">\r\n        <h2>Culture Control Parameters</h2>\r\n        <table class=\"settings-table\">\r\n          <tr v-for=\"(value, key) in updaterSettings\" :key=\"'updater-' + key\">\r\n            <td>{{ key }}</td>\r\n            <td><input v-model=\"updaterSettings[key]\" type=\"number\"></td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n      <!-- Model Settings -->\r\n      <div class=\"settings-block\">\r\n        <h2>Culture Growth Model Parameters</h2>\r\n        <table class=\"settings-table\">\r\n          <tr v-for=\"key in modelSettingsKeys\" :key=\"'model-' + key\">\r\n            <td>{{ key }}</td>\r\n            <td><input v-model=\"modelSettings[key]\" type=\"number\"></td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n\r\n    <div class=\"outcome\">\r\n      <h2>Outcome</h2>\r\n<!--      highlight numbers in bold-->\r\n      <p>Volume Used: {{ volumeUsed }} ml</p>\r\n      <p>IC50 Fold Change: <b>{{ ic50FoldChange }}</b></p>\r\n      <p>Volume per IC50 Doubling: <b>{{ volumePerIC50Doubling }}</b> ml</p>\r\n      <p>Time per IC50 Doubling: <b>{{ timePerIC50Doubling }}</b> hours</p>\r\n\r\n      <text>Duration [h]: </text>\r\n    <input v-model=\"simulationHours\" type=\"number\">\r\n    <br>\r\n          <button class=\"run-button\" @click=\"runSimulation\">Recalculate</button>\r\n\r\n    </div>\r\n\r\n          </div>\r\n    <div id=\"plotDiv\"></div>\r\n    <div id=\"adaptation-rate-plot\"></div>\r\n    <div id=\"mu-plot\"></div>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport BacteriaGrowthModel from '../models/BacteriaGrowthModel';\r\nimport MorbidostatUpdater from '../models/MorbidostatUpdater';\r\nimport ParameterPlotting from '@/models/ParameterPlotting';\r\nexport default {\r\n  name: 'SimulationComponent',\r\n  data() {\r\n    return {\r\n      updaterSettings: {\r\n        odDilutionThreshold: 0.3,\r\n        dilutionFactor: 1.6,\r\n        dilutionNumberInitialDose: 1,\r\n        doseInitialAdded: 10,\r\n        doseIncreaseFactor: 2,\r\n        thresholdGrowthRateIncreaseStress: 0.15,\r\n        thresholdGrowthRateDecreaseStress: -0.1,\r\n        delayDilutionMaxHours: 3,\r\n        delayStressIncreaseMinGenerations: 3,\r\n        volumeVial: 12,\r\n        pump1StockDrugConcentration: 0,\r\n        pump2StockDrugConcentration: 300\r\n      },\r\n      modelSettings: {\r\n        initialPopulation: 0.01,\r\n        doublingTimeMins: 20,\r\n        carryingCapacity: 2,\r\n        muMin: -0.1,\r\n        ic50Initial: 5,\r\n        ic10Ic50Ratio: 0.5,\r\n        doseEffectiveSlopeWidthMins: 120,\r\n        timeLagDrugEffectMins: 30,\r\n        adaptationRateMax: 0.08,\r\n        adaptationRateIc10Ic50Ratio: 0.8,\r\n        generationCurrent: 0,\r\n        drugConcentration: 0,\r\n        effectiveDose: 0,\r\n        timeCurrent: new Date()\r\n      },\r\n      settingsTsv: '', // To store the TSV data\r\n      volumeUsed: 0,\r\n      totalTime: 0,\r\n      ic50FoldChange: 0,\r\n      volumePerIC50Doubling: 0,\r\n      timePerIC50Doubling: 0,\r\n      simulationHours: 48,\r\n      modelSettingsKeys: [\r\n        'initialPopulation',\r\n        'doublingTimeMins',\r\n        'carryingCapacity',\r\n        'muMin',\r\n        'ic50Initial',\r\n        'ic10Ic50Ratio',\r\n        'doseEffectiveSlopeWidthMins',\r\n        'timeLagDrugEffectMins',\r\n        'adaptationRateMax',\r\n        'adaptationRateIc10Ic50Ratio',]\r\n\r\n    };\r\n  },\r\n  watch: {\r\n      updaterSettings: {\r\n        handler: 'runSimulation',\r\n        deep: true // This ensures that changes in object properties are detected\r\n      },\r\n      modelSettings: {\r\n        handler: 'runSimulation',\r\n        deep: true\r\n      }\r\n    },\r\n  mounted() {\r\n    this.runSimulation();\r\n  },\r\n  methods: {\r\n    runSimulation() {\r\n      const updater = new MorbidostatUpdater(this.updaterSettings);\r\n      const model = new BacteriaGrowthModel({\r\n        ...this.modelSettings,\r\n        updater: updater\r\n      });\r\n      model.plotSimulation(this.simulationHours);\r\n      // [volumeUsed, totalTime, ic50FoldChange] = model.getSimulationEfficiency();\r\n      let [volumeUsed, totalTime, ic50FoldChange] = model.getSimulationEfficiency();\r\n      const volumePerIC50Doubling = volumeUsed / Math.log2(ic50FoldChange);\r\n      const timePerIC50Doubling = totalTime / Math.log2(ic50FoldChange);\r\n      // console.log(`Volume Used: ${volumeUsed.toFixed(1)} ml, Total Time: ${totalTime.toFixed(1)} hours, IC50 fold change: ${ic50FoldChange.toFixed(2)}`);\r\n      // console.log(`Volume per IC50 doubling: ${volumePerIC50Doubling.toFixed(1)} ml`);\r\n      // console.log(`Time per IC50 doubling: ${timePerIC50Doubling.toFixed(1)} hours`);\r\n      this.volumeUsed = volumeUsed.toFixed(1);\r\n      this.totalTime = totalTime.toFixed(1);\r\n      this.ic50FoldChange = ic50FoldChange.toFixed(2);\r\n      this.volumePerIC50Doubling = volumePerIC50Doubling.toFixed(1);\r\n      this.timePerIC50Doubling = timePerIC50Doubling.toFixed(1);\r\n\r\n      const parameterPlotting = new ParameterPlotting(model);\r\n      parameterPlotting.plot_mu();\r\n      parameterPlotting.plot_adaptation_rate();\r\n\r\n      this.generateTsv();\r\n\r\n    },\r\n    generateTsv() {\r\n      const allSettings = { ...this.updaterSettings, ...this.modelSettings };\r\n      this.settingsTsv = Object.entries(allSettings)\r\n                               .map(([key, value]) => `${key}\\t${value}`)\r\n                               .join('\\n');\r\n    },\r\n\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.container {\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  color: #333;\r\n  padding: 20px;\r\n}\r\n\r\nh1, h2 {\r\n  color: #2C3E50;\r\n}\r\n\r\n.settings-container {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin-bottom: 20px;\r\n  font-size: 16px;\r\n}\r\n\r\n.settings-block {\r\n  background: #ECF0F1;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n}\r\n\r\n.settings-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.settings-table td {\r\n  padding: 8px;\r\n  border-top: 1px solid #BDC3C7;\r\n}\r\n\r\ninput {\r\n  width: 80px;\r\n  padding: 8px;\r\n  border: 1px solid #BDC3C7;\r\n  border-radius: 4px;\r\n  box-sizing: border-box; /* Added to include padding in the width */\r\n}\r\n\r\n.outcome {\r\n  background: #ECF0F1;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n  margin-bottom: 20px;\r\n  font-size: 26px;\r\n}\r\n\r\n.run-button {\r\n  background-color: #3498DB;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.run-button:hover {\r\n  background-color: #2980B9;\r\n}\r\n\r\n#plotDiv {\r\n  width: 100%;\r\n  height: 800px;\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n","// modelEquations.js\r\n\r\n// Replaces the mu function in Python\r\nfunction mu(dose, muMin, muMax, ic10Ic50Ratio, ic50) {\r\n    const doseIc10 = ic50 * ic10Ic50Ratio;\r\n    const kMu = Math.log(9) / (ic50 - doseIc10);\r\n    return muMin + (muMax / (1 + Math.exp(-kMu * (ic50 - dose))));\r\n}\r\n\r\n// Replaces the doseEffective function in Python\r\nfunction doseEffective(dose, lagTimeHrs, timeSinceAdditionHrs, slopeWidthHrs) {\r\n    const k = Math.log(19) / (0.5 * slopeWidthHrs);\r\n    const xValue = (timeSinceAdditionHrs - lagTimeHrs);\r\n    const effectiveDose = dose / (1 + Math.exp(-k * xValue));\r\n    return effectiveDose;\r\n}\r\n\r\n// Replaces the muEffective function in Python\r\nfunction muEffective(dose, muMin, muMax, ic10Ic50Ratio, ic50, population, carryingCapacity) {\r\n    const growthRate = mu(dose, 0, muMax, ic10Ic50Ratio, ic50);\r\n    return muMin + growthRate * (1 - population / carryingCapacity);\r\n}\r\n\r\n// Replaces the adaptationRate function in Python\r\nfunction adaptationRate(dose, adaptationRateMax, ic50, ic10Ic50Ratio, adaptationRateIc10Ic50Ratio) {\r\n    const ic10 = ic50 * ic10Ic50Ratio;\r\n    const kAdapt = -Math.log(adaptationRateIc10Ic50Ratio) / Math.pow((ic10 - ic50), 2);\r\n    const adaptRate = adaptationRateMax * Math.exp(-kAdapt * Math.pow((dose - ic50), 2));\r\n    return adaptRate;\r\n}\r\n\r\n// Export the functions to be used elsewhere in your application\r\nexport { mu, doseEffective, muEffective, adaptationRate };\r\n","class MorbidostatUpdater {\r\n    constructor(options = {}) {\r\n        const defaults = {\r\n            odDilutionThreshold: 0.3,\r\n            dilutionFactor: 1.6,\r\n            dilutionNumberInitialDose: 1,\r\n            doseInitialAdded: 10,\r\n            doseIncreaseFactor: 2,\r\n            thresholdGrowthRateIncreaseStress: 0.15,\r\n            thresholdGrowthRateDecreaseStress: -0.1,\r\n            delayDilutionMaxHours: 3,\r\n            delayStressIncreaseMinGenerations: 3,\r\n            volumeVial: 12,\r\n            pump1StockDrugConcentration: 0,\r\n            pump2StockDrugConcentration: 300\r\n        };\r\n\r\n        Object.assign(this, defaults, options);\r\n    }\r\n\r\n    rescueConditionIsMet(model) {\r\n        if (model.doses.length < 1) {\r\n            return false;\r\n        }\r\n\r\n        const lastDilutionTime = model.doses[model.doses.length - 1][1];\r\n        const hoursSinceLastDilution = (model.timeCurrent - lastDilutionTime) / 3600000;\r\n        if (hoursSinceLastDilution < this.delayDilutionMaxHours) {\r\n            return false;\r\n        }\r\n\r\n        if (model.growthRate > this.thresholdGrowthRateDecreaseStress) {\r\n            return false;\r\n        }\r\n\r\n        console.log(model.growthRate, this.thresholdGrowthRateDecreaseStress, \"Rescue condition met\");\r\n        return true;\r\n    }\r\n    diluteToWashIfNeeded(model) {\r\n        // Ensure there's at least one population data point before proceeding\r\n        if (!model.population || model.population.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Start with a base target dose based on pump2 stock concentration\r\n        let targetDose = this.pump2StockDrugConcentration * 0.02;\r\n\r\n        // Determine the last pump time\r\n        let lastPumpTime = model.population[0][1]; // Default to the first population entry if no doses\r\n        if (model.doses.length > 0) {\r\n            lastPumpTime = model.doses[model.doses.length - 1][1];\r\n            targetDose = Math.max(targetDose, model.doses[model.doses.length - 1][0]);\r\n        }\r\n\r\n        // Calculate the time difference in hours between the current time and the last pump time\r\n        const timeDifference = (model.timeCurrent.getTime() - lastPumpTime.getTime()) / 3600000; // Convert ms to hours\r\n\r\n        // Check if the time difference exceeds the maximum allowed delay for dilution\r\n        if (timeDifference > this.delayDilutionMaxHours) {\r\n            console.log(\"Washing dilution\", targetDose, \"time\", model.timeCurrent);\r\n            model.diluteCulture(targetDose, 1.2);\r\n        }\r\n    }\r\n\r\n\r\n    update(model) {\r\n        if (model.population.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (model.population[model.population.length - 1][0] >= this.odDilutionThreshold) {\r\n            let targetDose = 0;\r\n            if (model.doses.length === this.dilutionNumberInitialDose) {\r\n                targetDose = this.doseInitialAdded;\r\n            } else if (model.doses.length > this.dilutionNumberInitialDose) {\r\n                targetDose = model.doses[model.doses.length - 1][0];\r\n                // const lastDoseChangeTime = model.doses.reduceRight((acc, dose) => (dose[0] !== model.doses[model.doses.length - 1][0] ? dose[1] : acc), 0);\r\n\r\n                const lastDoseChangeTime = model.doses.reduceRight((acc, dose, index, array) => {\r\n                    if (acc !== null) {\r\n                        return acc;  // If already found, keep returning the found value\r\n                    }\r\n                    // Check if the current dose is different from the last dose and not already found\r\n                    if (index > 0 && dose[0] !== array[index - 1][0]) {\r\n                        return dose[1];  // Return the timestamp of the dose change\r\n                    }\r\n                    return null;  // Continue if no change is found yet\r\n                }, null);\r\n\r\n\r\n                console.log(\"Last dose change time\", lastDoseChangeTime);\r\n                const generationAtLastDoseChange = model.generations.find(gen => gen[1] >= lastDoseChangeTime)[0];\r\n                const generationsSinceLastDoseChange = model.generations[model.generations.length - 1][0] - generationAtLastDoseChange;\r\n                const generationsPerDilution = Math.log(this.dilutionFactor) / Math.log(2);\r\n                if (model.growthRate > this.thresholdGrowthRateIncreaseStress &&\r\n                    generationsSinceLastDoseChange + generationsPerDilution > this.delayStressIncreaseMinGenerations) {\r\n                    targetDose *= this.doseIncreaseFactor;\r\n                    console.log(\"Stress increase from\", model.doses[model.doses.length - 1][0], \"to\", targetDose, \"due to growth rate increase\");\r\n                    targetDose = Math.round(targetDose * 1000) / 1000;  // Keep three decimals\r\n                }\r\n            }\r\n            console.log(\"Dilution to target dose\", targetDose,\"time\", model.timeCurrent);\r\n            model.diluteCulture(targetDose);\r\n        } else if (this.rescueConditionIsMet(model)) {\r\n            console.log(\"Rescue dilution\");\r\n            model.diluteCulture(0);\r\n        }\r\n        this.diluteToWashIfNeeded(model);\r\n    }\r\n}\r\n\r\nexport default MorbidostatUpdater;","// Imports: Assuming you have separate modules for specific functionalities\r\nimport { doseEffective, muEffective, adaptationRate } from './ModelEquations.js';\r\nimport MorbidostatUpdater from './MorbidostatUpdater.js';\r\nimport Plotly from 'plotly.js-dist-min';\r\n\r\nclass BacteriaGrowthModel {\r\n    constructor(options = {}) {\r\n        // Default values\r\n        this.defaults = {\r\n            initialPopulation: 0.01,\r\n            doublingTimeMins: 20,\r\n            carryingCapacity: 0.9,\r\n            muMin: -0.1,\r\n            ic50Initial: 5,\r\n            ic10Ic50Ratio: 0.5,\r\n            doseEffectiveSlopeWidthMins: 120,\r\n            timeLagDrugEffectMins: 30,\r\n            adaptationRateMax: 0.08,\r\n            adaptationRateIc10Ic50Ratio: 0.8,\r\n            generationCurrent: 0,\r\n            drugConcentration: 0,\r\n            effectiveDose: 0,\r\n            timeCurrent: new Date(),  // This will handle the current time\r\n            updater: new MorbidostatUpdater()  // Placeholder for an update method class\r\n        };\r\n\r\n\r\n        // Merge defaults with user-provided options\r\n        Object.assign(this, this.defaults, options);\r\n\r\n        // Calculate maximum growth rate from doubling time\r\n        this.muMax = Math.log(2) / (this.doublingTimeMins / 60);\r\n\r\n        // Initialize model state\r\n        this.initializeModelState();\r\n    }\r\n\r\n    initializeModelState() {\r\n        this.timeCurrent = new Date();\r\n        this.population = [];\r\n        this.generations = [];\r\n        this.doses = [];\r\n        this.effectiveDoses = [];\r\n        this.ic50s = [[this.ic50Initial, this.timeCurrent]];\r\n        this.effectiveGrowthRates = [];\r\n        this.adaptationRates = [];\r\n    }\r\n\r\n    get growthRate() {\r\n        return this.effectiveGrowthRates.length ? this.effectiveGrowthRates[this.effectiveGrowthRates.length - 1][0] : 0;\r\n    }\r\n\r\n    calculateEffectiveDose(timeCurrent) {\r\n        // Check if there are any effective doses yet\r\n        if (this.effectiveDoses.length === 0) {\r\n            let currentEffectiveDose = this.doses.length > 0 ? this.doses[0][0] : 0;\r\n            this.effectiveDoses.push([currentEffectiveDose, this.timeCurrent]);\r\n        }\r\n\r\n        let effectiveDose = this.effectiveDoses[0][0];  // Initial effective dose\r\n        const initialEquilibriumDose = 0; // Define initial equilibrium dose\r\n        if (this.doses.length > 1) {\r\n            // Include initial equilibrium dose for calculation\r\n            const doses = [initialEquilibriumDose].concat(this.doses.map(dose => dose[0]));\r\n            const dilutionTimes = this.doses.map(dose => dose[1]);\r\n\r\n            // Loop through all added doses starting from the first computed difference\r\n            for (let i = 1; i < doses.length; i++) {\r\n                let addedDose = doses[i] - doses[i - 1];\r\n                if (addedDose === 0) continue;\r\n\r\n                // Calculate hours since the drug was added\r\n                let timeSinceAdditionHrs = (timeCurrent - dilutionTimes[i-1]) / 3600000;  // Convert milliseconds to hours\r\n                effectiveDose += doseEffective(addedDose, this.timeLagDrugEffectMins / 60, timeSinceAdditionHrs, this.doseEffectiveSlopeWidthMins / 60);\r\n            }\r\n        }\r\n        // this.effectiveDoses.push([effectiveDose, this.timeCurrent]);\r\n        return effectiveDose;\r\n    }\r\n\r\n\r\n\r\n    simulateExperimentMinute() {\r\n        let effectiveDose = this.calculateEffectiveDose(this.timeCurrent);\r\n        this.effectiveDoses.push([effectiveDose, this.timeCurrent]);\r\n        let effectiveGrowthRate = 0;\r\n        if (this.population.length) {\r\n            effectiveGrowthRate = muEffective(effectiveDose, this.muMin, this.muMax, this.ic10Ic50Ratio,\r\n                                                  this.ic50s[this.ic50s.length - 1][0], this.population[this.population.length - 1][0], this.carryingCapacity);\r\n            this.effectiveGrowthRates.push([effectiveGrowthRate, this.timeCurrent]);\r\n        }\r\n\r\n        if (effectiveDose > 0) {\r\n            let adaptRate = adaptationRate(effectiveDose, this.adaptationRateMax, this.ic50s[this.ic50s.length - 1][0],\r\n                                           this.ic10Ic50Ratio, this.adaptationRateIc10Ic50Ratio);\r\n            this.adaptationRates.push([adaptRate, this.timeCurrent]);\r\n\r\n            let ic50 = this.ic50s[this.ic50s.length - 1][0] * Math.exp(adaptRate / 60);\r\n            this.ic50s.push([ic50, this.timeCurrent]);\r\n        }\r\n\r\n        let newPopulation = this.population.length ? this.population[this.population.length - 1][0] * Math.exp(effectiveGrowthRate / 60) : this.initialPopulation;\r\n        this.population.push([newPopulation, this.timeCurrent]);\r\n        this.updater.update(this);\r\n    }\r\n\r\n    diluteCulture(targetDose = 0, dilutionFactor = 1.6) {\r\n        dilutionFactor = this.updater.dilutionFactor;\r\n        // Assume updater object contains necessary properties and methods\r\n        const addedVolume = this.updater.volumeVial * (dilutionFactor - 1);\r\n        const stockConcentrationHigh = this.updater.pump2StockDrugConcentration;\r\n        const stockConcentrationLow = this.updater.pump1StockDrugConcentration;\r\n        const currentDose = this.drugConcentration;\r\n        const currentVolume = this.updater.volumeVial;\r\n\r\n        // Calculate the maximum and minimum possible new doses\r\n        const maxDose = (currentDose * currentVolume + stockConcentrationHigh * addedVolume) / (currentVolume + addedVolume);\r\n        const minDose = (currentDose * currentVolume + stockConcentrationLow * addedVolume) / (currentVolume + addedVolume);\r\n\r\n        // Ensure the target dose is within the calculated range\r\n        targetDose = Math.min(targetDose, maxDose);\r\n        targetDose = Math.max(targetDose, minDose);\r\n\r\n        // Calculate the added dose to reach the target dose\r\n        const addedDose = targetDose - currentDose;\r\n        this.drugConcentration += addedDose;\r\n\r\n        // Update the model's doses record\r\n        this.doses.push([this.drugConcentration, this.timeCurrent]);\r\n\r\n        // Adjust the population size based on the dilution factor\r\n        if (this.population.length > 0) {\r\n            const lastPopulation = this.population[this.population.length - 1][0] / dilutionFactor;\r\n            this.population[this.population.length - 1] = [lastPopulation, this.timeCurrent];\r\n        }\r\n\r\n        // Update generation number based on dilution\r\n        let generationNumber = Math.log2(dilutionFactor);\r\n        if (this.generations.length > 0) {\r\n            generationNumber += this.generations[this.generations.length - 1][0];\r\n        }\r\n        this.generations.push([generationNumber, this.timeCurrent]);\r\n    }\r\n\r\n\r\n    simulateExperiment(simulationHours = 48) {\r\n        for (let t = 1; t <= simulationHours * 60; t++) {\r\n            this.timeCurrent = new Date(this.timeCurrent.getTime() + 60000);  // Add one minute\r\n            this.simulateExperimentMinute();\r\n        }\r\n    }\r\nplotSimulation(simulationHours) {\r\n    this.simulateExperiment(simulationHours);\r\n    this.getSimulationEfficiency();\r\n\r\n    // Prepare the data for plotting\r\n    const times = this.population.map(item => item[1]);\r\n    const ods = this.population.map(item => item[0]);\r\n    const growthRates = this.effectiveGrowthRates.map(item => ({ x: item[1], y: item[0] }));\r\n    const ic50s = this.ic50s.map(item => ({ x: item[1], y: item[0] }));\r\n    const doses = this.doses.map(item => ({ x: item[1], y: item[0] }));\r\n    const adaptationRates = this.adaptationRates.map(item => ({ x: item[1], y: item[0] }));\r\n    const generations = this.generations.map(item => ({ x: item[1], y: item[0] }));\r\n\r\n    // Create traces\r\n    const tracePopulation = {\r\n        x: times,\r\n        y: ods,\r\n        mode: 'markers',\r\n        name: 'Bacteria Population',\r\n        marker: { color: 'black', dash: 'dot', width: 1 }\r\n    };\r\n    const traceGrowthRate = {\r\n        x: growthRates.map(gr => gr.x),\r\n        y: growthRates.map(gr => gr.y),\r\n        mode: 'lines+markers',\r\n        name: 'Effective Growth Rate',\r\n        yaxis: 'y2',\r\n        line: { color: 'blue' }\r\n    };\r\n    const traceIC50 = {\r\n        x: ic50s.map(ic => ic.x),\r\n        y: ic50s.map(ic => ic.y),\r\n        mode: 'lines',\r\n        name: 'IC50',\r\n        yaxis: 'y4',\r\n        // small transparent line to show the IC50 value, no dots\r\n        line: { color: 'green', width: 1, dash: 'dot' }\r\n    };\r\n    const traceDoses = {\r\n        x: doses.map(d => d.x),\r\n        y: doses.map(d => d.y),\r\n        mode: 'lines+markers',\r\n        name: 'Dose',\r\n        yaxis: 'y4',\r\n        line: {\r\n            color: 'green',\r\n            shape: 'hv', // Sets the line to be horizontal then vertical\r\n            width: 2\r\n        }\r\n    };\r\n        // trace effective dose\r\n    const traceEffectiveDoses = {\r\n        x: this.effectiveDoses.map(ed => ed[1]),\r\n        y: this.effectiveDoses.map(ed => ed[0]),\r\n        mode: 'lines',\r\n        name: 'Effective Dose',\r\n        yaxis: 'y4',\r\n        line: { color: 'green', width: 1 }\r\n    };\r\n\r\n    const traceAdaptationRates = {\r\n        x: adaptationRates.map(ar => ar.x),\r\n        y: adaptationRates.map(ar => ar.y),\r\n        mode: 'lines',\r\n        name: 'Adaptation Rate',\r\n        yaxis: 'y5',\r\n        line: { color: 'violet' }\r\n    };\r\n    const traceGenerations = {\r\n        x: generations.map(g => g.x),\r\n        y: generations.map(g => g.y),\r\n        mode: 'lines+markers',\r\n        name: 'Generations',\r\n        yaxis: 'y6',\r\n        line: { color: 'red' }\r\n    };\r\n\r\n    // Setup layout\r\n    const layout = {\r\n        title: '',\r\n        xaxis: { title: 'Time' },\r\n        yaxis: { title: 'Optical Density' },\r\n        yaxis2: {\r\n            title: 'Effective Growth Rate',\r\n            overlaying: 'y',\r\n            side: 'right'\r\n        },\r\n        // yaxis3: {\r\n        //     title: 'IC50',\r\n        //     overlaying: 'y',\r\n        //     side: 'right',\r\n        //     position: 0.95\r\n        // },\r\n        yaxis4: {\r\n            title: 'Dose',\r\n            overlaying: 'y',\r\n            side: 'right',\r\n            position: 0.90\r\n        },\r\n        yaxis5: {\r\n            title: 'Adaptation Rate',\r\n            overlaying: 'y',\r\n            side: 'right',\r\n            position: 0.85\r\n        },\r\n        yaxis6: {\r\n            title: 'Generations',\r\n            overlaying: 'y',\r\n            side: 'right',\r\n            position: 0.80\r\n        }\r\n    };\r\n\r\n    // Plotting\r\n    const data = [tracePopulation, traceGrowthRate, traceIC50, traceDoses,traceEffectiveDoses, traceAdaptationRates, traceGenerations];\r\n    Plotly.newPlot('plotDiv', data, layout);\r\n}\r\n\r\ngetSimulationEfficiency() {\r\n    const dilutionFactor = this.updater.dilutionFactor;\r\n    const addedVolume = this.updater.volumeVial * (dilutionFactor - 1);\r\n    const volumeUsed = this.doses.length * addedVolume;\r\n    const ic50FoldChange = this.ic50s[this.ic50s.length - 1][0] / this.ic50s[0][0];\r\n    const totalTime = (this.population[this.population.length - 1][1] - this.population[0][1]) / 3600000;\r\n    // const volumePerIC50Doubling = volumeUsed / Math.log2(ic50FoldChange);\r\n    // const timePerIC50Doubling = totalTime / Math.log2(ic50FoldChange);\r\n    // console.log(`Volume Used: ${volumeUsed.toFixed(1)} ml, Total Time: ${totalTime.toFixed(1)} hours, IC50 fold change: ${ic50FoldChange.toFixed(2)}`);\r\n    // console.log(`Volume per IC50 doubling: ${volumePerIC50Doubling.toFixed(1)} ml`);\r\n    // console.log(`Time per IC50 doubling: ${timePerIC50Doubling.toFixed(1)} hours`);\r\n    return [volumeUsed, totalTime, ic50FoldChange];\r\n}\r\n}\r\n\r\nexport default BacteriaGrowthModel;\r\n","import { muEffective, adaptationRate } from './ModelEquations.js';\r\n\r\nimport Plotly from 'plotly.js-dist-min';\r\n\r\n\r\n// usage in vue:\r\n// import ParameterPlotting from '@/models/ParameterPlotting';\r\n// const parameterPlotting = new ParameterPlotting(model);\r\n// parameterPlotting.plot_mu();\r\n\r\nexport default class ParameterPlotting {\r\n    constructor(model = null) {\r\n        this.model = model;\r\n    }\r\n\r\n    plot_mu() {\r\n        const doses = Array.from({ length: 1000 }, (_, i) => i * 0.1);\r\n        const muMin = this.model.muMin;\r\n        const muMax = this.model.muMax;\r\n        const ic50 = this.model.ic50Initial;\r\n        const ic10Ic50Ratio = this.model.ic10Ic50Ratio;\r\n\r\n        const muValues = doses.map(dose => muEffective(dose, muMin, muMax, ic10Ic50Ratio, ic50, 0.5, 1));\r\n\r\n        const data = [\r\n        {\r\n            x: doses,\r\n            y: muValues,\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n            line: {\r\n            color: 'blue',\r\n            },\r\n        },\r\n        ];\r\n\r\n        const layout = {\r\n        title: 'Effect of Drug Dose on Growth Rate',\r\n        xaxis: {\r\n            title: 'Effective Drug Dose',\r\n        },\r\n        yaxis: {\r\n            title: 'Growth Rate [1/hour]',\r\n        },\r\n        };\r\n\r\n        Plotly.newPlot('mu-plot', data, layout);\r\n    }\r\n\r\n    plot_adaptation_rate() {\r\n    const doses = Array.from({ length: 1000 }, (_, i) => i * 0.1);\r\n    const adaptationRateMax = this.model.adaptationRateMax;\r\n    const ic50 = this.model.ic50Initial;\r\n    const ic10Ic50Ratio = this.model.ic10Ic50Ratio;\r\n    const adaptationRateIc10Ic50Ratio = this.model.adaptationRateIc10Ic50Ratio;\r\n\r\n    // Generate y values for each dose using the adaptationRate function\r\n    const yValues = doses.map(dose => adaptationRate(dose, adaptationRateMax, ic50, ic10Ic50Ratio, adaptationRateIc10Ic50Ratio));\r\n\r\n    const data = [{\r\n        x: doses,\r\n        y: yValues,\r\n        type: 'scatter',\r\n        mode: 'lines',\r\n        line: {\r\n            color: 'black',\r\n        },\r\n    }];\r\n\r\n    const layout = {\r\n        title: 'Effect of Antibiotic Dose on Adaptation Rate',\r\n        xaxis: {\r\n            title: 'Effective Antibiotic Dose',\r\n        },\r\n        yaxis: {\r\n            title: 'Adaptation Rate [1/hour]',\r\n        },\r\n    };\r\n\r\n    Plotly.newPlot('adaptation-rate-plot', data, layout);\r\n}\r\n}\r\n","import { render } from \"./SimulationComponent.vue?vue&type=template&id=09a6b1e5\"\nimport script from \"./SimulationComponent.vue?vue&type=script&lang=js\"\nexport * from \"./SimulationComponent.vue?vue&type=script&lang=js\"\n\nimport \"./SimulationComponent.vue?vue&type=style&index=0&id=09a6b1e5&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <br>\r\n</template>\r\n","import { render } from \"./TableComponent.vue?vue&type=template&id=5f16687a\"\nconst script = {}\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=1812aba4\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=1812aba4&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksimulation\"] = self[\"webpackChunksimulation\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(5848); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementBlock","_createVNode","_component_TableComponent","_component_SimulationComponent","msg","_createElementVNode","class","id","_Fragment","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_renderList","$data","updaterSettings","value","key","_toDisplayString","$event","type","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","modelSettingsKeys","modelSettings","_hoisted_10","_hoisted_11","_hoisted_12","volumeUsed","_createTextVNode","ic50FoldChange","volumePerIC50Doubling","timePerIC50Doubling","_hoisted_13","_cache","simulationHours","_hoisted_14","onClick","args","$options","runSimulation","_hoisted_15","_hoisted_16","_hoisted_17","mu","dose","muMin","muMax","ic10Ic50Ratio","ic50","doseIc10","kMu","Math","log","exp","doseEffective","lagTimeHrs","timeSinceAdditionHrs","slopeWidthHrs","k","xValue","effectiveDose","muEffective","population","carryingCapacity","growthRate","adaptationRate","adaptationRateMax","adaptationRateIc10Ic50Ratio","ic10","kAdapt","pow","adaptRate","MorbidostatUpdater","constructor","options","defaults","odDilutionThreshold","dilutionFactor","dilutionNumberInitialDose","doseInitialAdded","doseIncreaseFactor","thresholdGrowthRateIncreaseStress","thresholdGrowthRateDecreaseStress","delayDilutionMaxHours","delayStressIncreaseMinGenerations","volumeVial","pump1StockDrugConcentration","pump2StockDrugConcentration","Object","assign","this","rescueConditionIsMet","model","doses","length","lastDilutionTime","hoursSinceLastDilution","timeCurrent","console","diluteToWashIfNeeded","targetDose","lastPumpTime","max","timeDifference","getTime","diluteCulture","update","lastDoseChangeTime","reduceRight","acc","index","array","generationAtLastDoseChange","generations","find","gen","generationsSinceLastDoseChange","generationsPerDilution","round","BacteriaGrowthModel","initialPopulation","doublingTimeMins","ic50Initial","doseEffectiveSlopeWidthMins","timeLagDrugEffectMins","generationCurrent","drugConcentration","Date","updater","initializeModelState","effectiveDoses","ic50s","effectiveGrowthRates","adaptationRates","calculateEffectiveDose","currentEffectiveDose","push","initialEquilibriumDose","concat","map","dilutionTimes","i","addedDose","simulateExperimentMinute","effectiveGrowthRate","newPopulation","addedVolume","stockConcentrationHigh","stockConcentrationLow","currentDose","currentVolume","maxDose","minDose","min","lastPopulation","generationNumber","log2","simulateExperiment","t","plotSimulation","getSimulationEfficiency","times","item","ods","growthRates","x","y","tracePopulation","mode","name","marker","color","dash","width","traceGrowthRate","gr","yaxis","line","traceIC50","ic","traceDoses","d","shape","traceEffectiveDoses","ed","traceAdaptationRates","ar","traceGenerations","g","layout","title","xaxis","yaxis2","overlaying","side","yaxis4","position","yaxis5","yaxis6","data","Plotly","totalTime","ParameterPlotting","plot_mu","Array","from","_","muValues","plot_adaptation_rate","yValues","settingsTsv","watch","handler","deep","mounted","methods","toFixed","parameterPlotting","generateTsv","allSettings","entries","join","__exports__","script","components","SimulationComponent","TableComponent","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","n","getter","__esModule","a","definition","o","defineProperty","enumerable","get","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}